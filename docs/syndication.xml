<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cognitive Inheritance</title>
    <description>The Application Development Experiences of an Enterprise Developer</description>
    <link>http://www.cognitiveinheritance.com/</link>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Prehensile Pony Tail 1.0</generator>
    <language>en-US</language>
    <atom:link href="https://cognitiveinheritance.com/syndication.xml" rel="self" type="application/rss+xml" />	
    <item>
  <title>Microservices&colon; Size Doesn&apos;t Matter, Reliability Does</title>
  <description>&lt;p&gt;There are conflicting opinions among architects about how many microservices a distributed system should have, and the size of those services. Some people may say that a particular design has too many microservices, and that it should be consolidated into fewer, larger services to reduce deployment and operational complexity. Others may say that the same design doesn&apos;t have enough microservices, and that it should be broken-down into smaller, more granular services to reduce internal complexity. Aside from the always true and rarely helpful &amp;quot;it depends...&amp;quot;, is there good guidance on the subject?&lt;/p&gt;
&lt;p&gt;The truth is, the number and size of microservices is not a measure of quality or performance unto itself, it is a design decision based on one primary characteristic, &lt;strong&gt;Reliability&lt;/strong&gt;. As such, there is a simple rule guiding the creation of services, but it isn&apos;t based on the size or quantity of services. The rule is based entirely on how much work a service does.&lt;/p&gt;
&lt;p&gt;After security, reliability is the most important attribute of any system, because it affects the satisfaction of both the users and developers, as well as the productivity and agility of the development and support teams. A reliable system has the following characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It performs its duties as expected&lt;/li&gt;
&lt;li&gt;It has minimal failures where it has to report to the user that it is unable to perform its duties&lt;/li&gt;
&lt;li&gt;It has minimal downtime when it cannot be reached and opportunities may be lost&lt;/li&gt;
&lt;li&gt;It recovers itself automatically when outages do occur, without data loss&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Having reliable systems means that your support engineers won&apos;t be constantly woken-up in the middle of the night to deal with outages, and your customers will remain satisfied with the quality of the product.&lt;/p&gt;
&lt;h4&gt;How do we build reliable systems with microservices?&lt;/h4&gt;
&lt;p&gt;The key to building reliable systems using microservices is to follow one simple rule: &lt;strong&gt;avoid dual-writes&lt;/strong&gt;. A dual-write is when a service makes more than one change to system state within an execution context. Dual-writes are the enemy of reliability, because they create the risk of inconsistency, data loss, and data corruption.&lt;/p&gt;
&lt;p&gt;For example, a web API that updates a database and sends a message to a queue during the execution of a single web request is performing a dual-write since it is making two different changes to the state of the system, and both of the changes are expected to occur reliably. If one of the writes succeeds and the other fails, the system state becomes out of sync and system behavior becomes unpredictable. The errors created when these types of failures occur are often hard to find and remediate because they can present very differently depending on the part of the process being executed when the failure happened.&lt;/p&gt;
&lt;p&gt;The best-practice is to allow microservices to perform &lt;a href=&quot;https://en.wikipedia.org/wiki/Idempotence&quot; title=&quot;Idempotence is the ability to execute a task an arbitrary number of times (&amp;gt;1) and have the resulting state of the system be the same as if the task was executed once.&quot;&gt;idempotent&lt;/a&gt; operations like database reads as often as they need, but to only write data once. An &lt;strong&gt;atomic update&lt;/strong&gt; to a database is an example of such a write, regardless of how many tables or collections are updated during that process. In this way, we can keep the state of each service consistent, and the system behavior deterministic. If the process fails even part-way through, we know how to recover, and can often do it automatically.&lt;/p&gt;
&lt;p&gt;Building this type of system does require a change in how we design our services. In the past, it was very common for us to make multiple changes to a system&apos;s state, especially inside a monolithic application. To remain reliable, we need to leverage tools like &lt;a href=&quot;https://en.wikipedia.org/wiki/Change_data_capture&quot; title=&quot;Events created by a database system when data updates occur that can reliably trigger downstream actions&quot;&gt;Change Data Capture (CDC)&lt;/a&gt;, which is available in most modern database systems, or the &lt;a href=&quot;https://learn.microsoft.com/en-us/azure/architecture/best-practices/transactional-outbox-cosmos&quot; title=&quot;Reliably update a data store AND take additional downstream action by atomically writing 2 updates to the data store, the state update, and an event that is monitored for by another system and used to take the additional action&quot;&gt;Transactional Outbox Pattern&lt;/a&gt; so that we can write our data once, and have that update trigger other activities downstream.&lt;/p&gt;
&lt;p&gt;Since microservices are sized to avoid dual-writes, the number of microservices in a system is determined by what they do and how they interact. The number of microservices is not a fixed or arbitrary number, but a result of the system design and the business needs. By following the rule of avoiding dual-writes, you can size your microservices appropriately, and achieve a system that is scalable and adaptable, but most of all, reliable. Of course, this practice alone will not guarantee the reliability of your systems, but it will make reliability possible, and is the best guideline I&apos;ve found for sizing microservices.&lt;/p&gt;
&lt;p&gt;For more detail on how to avoid the Dual-Writes Anti-Pattern, please see my article from December 2022 on &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-1of6-context.html&quot;&gt;The Execution Context&lt;/a&gt;.&lt;/p&gt;
</description>
  <link>https://www.cognitiveinheritance.com/Posts/microservices-size-does-not-matter.html</link>
  <author>aa88801d-9543-467e-9d7e-8768d2d14aa7@bsstahl.com (Barry S. Stahl)</author>
  <guid>https://www.cognitiveinheritance.com/Permalinks/53e0a79d-1096-4874-9639-6c1fb3eb8b47.html</guid>
  <pubDate>Mon, 20 Feb 2023 07:00:00 GMT</pubDate>
</item><item>
  <title>Simple Linear Regression</title>
  <description>&lt;p&gt;My high-school chemistry teacher, Mrs. J, had a name for that moment when she could see the lightbulb go on over your head. You know, that instant where realization hits and a concept sinks-in and becomes part of your consciousness. The moment that you truly &amp;quot;Grok&amp;quot; a principle. She called that an &amp;quot;aha experience&amp;quot;.&lt;/p&gt;
&lt;p&gt;One of my favorite &amp;quot;aha experiences&amp;quot; from my many years as a Software Engineer, is when I realized that the simplest neural network, a model with one input and one output, was simply modeling a line, and that training such a model, was just performing a linear regression. Mind. Blown.&lt;/p&gt;
&lt;p&gt;In case you haven&apos;t had this particular epiphany yet, allow me to go into some detail. I also discuss this in my conference talk, &lt;a href=&quot;https://cognitiveinheritance.com/Pages/Speaking-Engagements.html#ai-talks&quot;&gt;A Developer&apos;s Introduction to Artificial Intelligences&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Use Case: Predict the Location of a Train&lt;/h4&gt;
&lt;p&gt;Let&apos;s use the example of predicting the location of a train. Because they are on rails, trains move in 1-dimensional space. We can get a good approximation of their movement, especially between stops, by assuming they travel at a consistent speed. As a result, we can make a reasonably accurate prediction of a train&apos;s distance from a particular point on the rail, using a linear equation.&lt;/p&gt;
&lt;p&gt;If we have sensors reporting the location and time of detection of our train, spread-out across our fictional rail system, we might be able to build a graph of these reports that looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.cognitiveinheritance.com/Images/Positive Only Linear Data.png&quot; alt=&quot;A plot of data points that, while noisy, clearly start from the origin at the bottom-left and moves in a line toward the top-right&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I think it is clear that this data can be represented using a &amp;quot;best-fit line&amp;quot;. Certainly there is some error in the model, perhaps due to sensor or reporting errors, or maybe just to normal variance of the data. However, there can be no doubt that the best fit for this data would be represented as a line. In fact, there are a number of tools that can make it very easy to generate such a line. But what does that line really represent? To be a &amp;quot;best-fit&amp;quot;, the line needs to be drawn in such a way as to minimize the differences between the values found in the data and the values on the line. Thus, the total error between the values predicted by our best-fit line, and the actual values that we measured, is as small as we can possibly get it.&lt;/p&gt;
&lt;h4&gt;A Linear Neural Network&lt;/h4&gt;
&lt;p&gt;A simple neural network, one without any hidden layers, consists of one or more input nodes, connected with edges to one or more output nodes. Each of the edges has a weight and each output node has a bias. The values of the output nodes are calculated by summing the product of each input connected to it, along with its corresponding weight, and adding in the output node&apos;s bias. Let&apos;s see what our railroad model might look like using a simple neural network.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.cognitiveinheritance.com/Images/Simplest Neural Network.png&quot; alt=&quot;The simplest neural network; 1 input node, connected to 1 output node via 1 edge&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Ours is the simplest possible neural network, one input connected to one output, where our &lt;strong&gt;X&lt;/strong&gt; value (time) is the input and the output &lt;strong&gt;Y&lt;/strong&gt; is our prediction of the distance the train has traveled in that time. To make the best prediction we need to determine the values for the weight of the edge &lt;strong&gt;m&lt;/strong&gt; and the bias of the output node &lt;strong&gt;b&lt;/strong&gt; that produce the output that minimizes the errors in the model.&lt;/p&gt;
&lt;p&gt;The process of finding the weights and biases values for a neural network that minimize the error is know as &lt;em&gt;Training&lt;/em&gt; the model. Once these values are determined, we use the fact that we multiply the weight by the input (m * X) and add in the bias. This gives us an equation in the form:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Y = mX + b&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You may recognize this as the &lt;strong&gt;slope-intercept&lt;/strong&gt; form of the equation for a line, where the slope &lt;strong&gt;m&lt;/strong&gt; represents the speed of the train, and the bias &lt;strong&gt;b&lt;/strong&gt; represents the starting distance from the origin. Once our training process gives us values for &lt;strong&gt;m&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt;, we can easily plug-in any value for &lt;strong&gt;X&lt;/strong&gt; and get a prediction for the location of our train.&lt;/p&gt;
&lt;h4&gt;Training a Model&lt;/h4&gt;
&lt;p&gt;Training an AI model is simply finding the set of parameters that minimize the difference between the predicted output and the actual output. This is key to understanding AI - it&apos;s all about minimizing the error. Error minimization is the exact same goal as we have when performing a linear regression, which makes sense since these regressions are predictive models on their own, they just aren&apos;t generally depicted as neural networks.&lt;/p&gt;
&lt;p&gt;There are many ways to perform the error-minimization process. Many more complicated models are trained using an iterative optimization routine called &lt;strong&gt;Gradient Descent&lt;/strong&gt;. Extremely simple models like this one often use a less complicated process such as &lt;strong&gt;Ordinary Least Squares&lt;/strong&gt;. The goals are the same however, values for weights and biases in the model are found that minimize the error in the output, resulting in a model can make the desired predictions based on known inputs.&lt;/p&gt;
&lt;p&gt;Regardless of the method used, the realization that training the simplest neural network results in a model of a line provided the &amp;quot;aha experience&amp;quot; I needed as the foundation for my understanding of Machine Learning models. I hope, by publishing this article, that others may also benefit from this recognition.&lt;/p&gt;
</description>
  <link>https://www.cognitiveinheritance.com/Posts/simple-linear-regression.html</link>
  <author>aa88801d-9543-467e-9d7e-8768d2d14aa7@bsstahl.com (Barry S. Stahl)</author>
  <guid>https://www.cognitiveinheritance.com/Permalinks/18a693d3-448c-4477-b4e2-7193e896a2b6.html</guid>
  <pubDate>Mon, 13 Feb 2023 07:00:00 GMT</pubDate>
</item><item>
  <title>Like a River</title>
  <description>&lt;p&gt;We all understand to some degree, that the metaphor comparing the design and construction of software to that of a building is flawed at best. That isn&apos;t to say it&apos;s useless of course, but it seems to fail in at least one critical way; it doesn&apos;t take into account that creating software should be solving a business problem that has never been solved before. Sure, there are patterns and tools that can help us with technical problems similar to those that have been solved in the past, but we should not be solving the same business problem over and over again. If we are, we are doing something very wrong. Since our software cannot simply follow long-established plans and procedures, and can evolve very rapidly, even during construction, the over-simplification of our processes by excluding the innovation and problem-solving aspects of our craft, feels rather dangerous.&lt;/p&gt;
&lt;h4&gt;Like Constructing a Building&lt;/h4&gt;
&lt;p&gt;It seems to me that by making the comparison to building construction, we are over-emphasizing the scientific aspects of software engineering, and under-emphasizing the artistic ones. That is, we don&apos;t put nearly enough value on innovation such as designing abstractions for testability and extensibility. We also don&apos;t emphasize enough the need to understand the distinct challenges of our particular problem domain, and how the solution to a similar problem in a different domain may focus on the wrong features of the problem. As an example, let&apos;s take a workforce scheduling tool. The process of scheduling baristas at a neighborhood coffee shop is fundamentally similar to one scheduling pilots to fly for a small commercial airline. However, I probably don&apos;t have to work too hard to convince you that the two problems have very different characteristics when it comes to determining the best solutions. In this case, the distinctions are fairly obvious, but in many cases they are not.&lt;/p&gt;
&lt;p&gt;Where the architecture metaphor makes the most sense to me is in the user-facing aspects of both constructions. The physical aesthetics, as well as the experience humans have in their interactions with the features of the design are critical in both scenarios, and in both cases will cause real problems if ignored or added as an afterthought. Perhaps this is why the architecture metaphor has become so prevalent in that it is easy to see the similarities between the aesthetics and user-experience of buildings and software, even for a non-technical audience. However, most software built today has a much cleaner separation of concerns than software built when this metaphor was becoming popular in the 1960s and 70s, rendering it mostly obsolete for the vast majority of our systems and sub-systems.&lt;/p&gt;
&lt;p&gt;When we consider more technical challenges such as design for reliability and resiliency, the construction metaphor fails almost completely. Reliability is far more important in the creation of buildings than it is in most software projects, and often very different. While it is never ok for the structure of a building to fail, it can be perfectly fine, and even expected, for most aspects of a software system to fail occasionally, as long as those failures are well-handled. Designing these mechanisms is a much more flexible and creative process in building software, and requires a large degree of innovation to solve these problems in ways that work for each different problem domain. Even though the two problems can share the same name in software and building construction, and have some similar characteristics, they are ultimately very different problems and should be seen as such. The key metaphors we use to describe our tasks should reflect these differences.&lt;/p&gt;
&lt;h4&gt;Like a River&lt;/h4&gt;
&lt;p&gt;For more than a decade now, I&apos;ve been fascinated by Grady Booch&apos;s suggestion that a more apt metaphor for the structure and evolution of the software within an enterprise is that of a river and its surrounding ecosystem &lt;a href=&quot;https://www.computer.org/csdl/magazine/so/2009/03&quot;&gt;G. Booch, &amp;quot;Like a River&amp;quot; in IEEE Software, vol. 26, no. 03, pp. 10-11, 2009&lt;/a&gt;. In this abstraction, bank-to-bank slices represent the current state of our systems, while upstream-downstream sections represent changes over time. The width and depth of the river represent the breadth and depth of the structures involved, while the speed of the water, and the differences in speed between the surface (UI) and depths (back-end) represent the speed of changes within those sub-systems.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The life cycle of a software-intensive system is like a river, and we, as developers, are but captains of the boats that ply its waters and dredge its channels. - Grady Booch&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I will not go into more detail on Booch&apos;s analogy, since it will be far better to read it for yourself, or &lt;a href=&quot;https://www.computer.org/publications/tech-news/on-architecture/like-a-river&quot;&gt;hear it in his own voice&lt;/a&gt;. I will however point out that, in his model, Software Engineers are &amp;quot;…captains of the boats that ply the waters and dredge the channels&amp;quot;. It is in this context, that I find the river metaphor most satisfying.&lt;/p&gt;
&lt;p&gt;As engineers, we:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Navigate and direct the flow of software development, just as captains steer their boats ina particular direction.&lt;/li&gt;
&lt;li&gt;Make decisions and take action to keep the development process moving forward, similar to how captains navigate their boats through obstacles and challenges.&lt;/li&gt;
&lt;li&gt;Maintain a highly-functional anomaly detection and early-warning system to alert us of upcoming obstacles such as attacks and system outages, similar to the way captains use sonar to detect underwater obstacles and inspections by their crew, to give them useful warnings.&lt;/li&gt;
&lt;li&gt;Use ingenuity and skill, while falling back on first-principles, to know when to add abstractions or try something new, in the same way that captains follow the rules of seamanship, but know when to take evasive or unusual action to protect their charge.&lt;/li&gt;
&lt;li&gt;Maintain a good understanding of the individual components of the software, as well as the broader architecture and how each component fits within the system, just as captains need to know both the river and its channels, and the details of the boat on which they travel.&lt;/li&gt;
&lt;li&gt;Are responsible for ensuring the software is delivered on time and within budget, similar to how captains ensure their boats reach their destination on schedule.&lt;/li&gt;
&lt;li&gt;May be acting on but one small section at a time of the broader ecosystem. That is, an engineer may be working on a single feature, and make decisions on how that element is implemented, while other engineers act similarly on other features. This is akin to the way many captains may navigate the same waters simultaneously on different ships, and must make decisions that take into account the presence, activities and needs of the others.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This metaphor, in my opinion, does a much better job of identifying the critical nature of the software developer in the design of our software than then that of the creation of a building structure. It states that our developers are not merely building walls, but they are piloting ships, often through difficult waters that have never previously been charted. These are not laborers, but knowledge-workers whose skills and expertise need to be valued and depended on.&lt;/p&gt;
&lt;p&gt;Unfortunately this metaphor, like all others, is imperfect. There are a number of elements of software engineering where no reasonable analog exists into the world of a riverboat captain. One example is the practice of pair or mob programming. I don&apos;t recall ever hearing of any instances where a pair or group of ships captains worked collaboratively, and on equal footing, to operate a single ship. Likewise, the converse is also true. I know of no circumstances in software engineering where split-second decisions can have life-or-death consequences. That said, I think the captain metaphor does a far better job of describing the skill and ingenuity required to be a software engineer than that of building construction.&lt;/p&gt;
&lt;p&gt;To be very clear, I am not saying that the role of a construction architect, or even construction worker, doesn&apos;t require skill and ingenuity, quite the contrary. I am suggesting that the types of skills and the manner of ingenuity required to construct a building, doesn&apos;t translate well in metaphor to that required of a software engineer, especially to those who are likely to be unskilled in both areas. It is often these very people, our management and leadership, whom these metaphors are intended to inform. Thus, the construction metaphor represents the job of a software developer ineffectively.&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;The comparisons of creating software to creating an edifice is not going away any time soon. Regardless of its efficacy, this model has come to be part of our corporate lexicon and will likely remain so for the foreseeable future. Even the title of &amp;quot;Software Architect&amp;quot; is extremely prevalent in our culture, a title which I have held, and a role that I have enjoyed for many years now. That said, it could only benefit our craft to make more clear the ways in which that metaphor fails. This clarity would benefit not just the non-technical among us who have little basis to judge our actions aside from these metaphors, but also us as engineers. It is far too easy for anyone to start to view developers as mere bricklayers, rather than the ships captains we are. This is especially true when generations of engineers have been brought up on and trained on the architecture metaphor. If they think of themselves as just workers of limited, albeit currently valuable skill, it will make it much harder for them to challenge those things in our culture that need to be challenged, and to prevent the use of our technologies for nefarious purposes.&lt;/p&gt;
</description>
  <link>https://www.cognitiveinheritance.com/Posts/like-a-river.html</link>
  <author>aa88801d-9543-467e-9d7e-8768d2d14aa7@bsstahl.com (Barry S. Stahl)</author>
  <guid>https://www.cognitiveinheritance.com/Permalinks/472f33ba-2519-4fa0-84c1-f1dc869d4cba.html</guid>
  <pubDate>Mon, 06 Feb 2023 07:00:00 GMT</pubDate>
</item><item>
  <title>Microservices - Not Just About Scalability</title>
  <description>&lt;p&gt;&lt;strong&gt;Scalability&lt;/strong&gt; is an important feature of microservices and event-driven architectures, however it is only one of the many benefits these types of architectures provide. Event-driven designs create systems with high availability and fault tolerance, as well as improvements for the development teams such as flexibility in technology choices and the ability to subdivide tasks better. These features can help make systems more robust and reliable, and have a great impact on development team satisfaction. It is important to consider these types of architectures not just for systems that need to scale to a high degree, but for any system where reliability or complexity are a concern.&lt;/p&gt;
&lt;p&gt;The reliability of microservices come from the fact that they break-down monolithic applications into smaller, independently deployable services. When implemented properly this approach allows for the isolation of failures, where the impact of a failure in one service can be limited to that service and its consumers, rather than cascading throughout the entire system. Additionally, microservice architectures enable much easier rollbacks, where if a new service version has a bug, it can be rolled back to a previous version without affecting other services. Event-driven approaches also decouple services by communicating through events rather than direct calls, making it easier to change or replace them without affecting other services. Perhaps most importantly, microservice architectures help reliability by avoiding dual-writes. Ensuring that our services make at most one state change per execution context allows us to avoid the very painful inconsistencies that can occur when data is written to multiple locations simultaneously and these updates are only partially successful.&lt;/p&gt;
&lt;p&gt;When asynchronous eventing is used rather than request-response messages, these systems are further decoupled in time, improving fault-tolerance and allowing the systems to self-heal from failures in downstream dependencies. Microservices also enable fault-tolerance in our services by making it possible for some of our services to be idempotent or even fully stateless. Idempotent services can be called repeatedly without additional side-effects, making it easy to recover from failures that occur during our processes.&lt;/p&gt;
&lt;p&gt;Finally, microservices improve the development and support process by enabling modularity and allowing each team to use the tools and technologies they prefer. Teams can work on smaller, independent parts of the system, reducing coordination overhead and enabling faster time-to-market for new features and improvements. Each service can be deployed and managed separately, making it easier to manage resource usage and address problems as they arise. These architectures provide greater flexibility and agility, allowing teams to focus on delivering value to the business without being bogged down by the constraints of a monolithic architecture.&lt;/p&gt;
&lt;p&gt;While it is true that most systems won&apos;t ever need to scale to the point that they &lt;em&gt;require&lt;/em&gt; a microservices architecture, many of these same systems do need the reliability and self-healing capabilities modern architectures provide. Additionally, everyone wants to work on a development team that is efficient, accomplishes their goals, and doesn&apos;t constantly force them to wake up in the middle of the night to handle support issues.&lt;/p&gt;
&lt;p&gt;If you have avoided using event-driven microservices because scalability isn&apos;t one of the key features of your application, I encourage you to explore the many other benefits of these architectures.&lt;/p&gt;
</description>
  <link>https://www.cognitiveinheritance.com/Posts/microservices-not-just-about-scale.html</link>
  <author>aa88801d-9543-467e-9d7e-8768d2d14aa7@bsstahl.com (Barry S. Stahl)</author>
  <guid>https://www.cognitiveinheritance.com/Permalinks/fb1cfc1d-1635-45f9-954f-772527d43661.html</guid>
  <pubDate>Mon, 30 Jan 2023 07:00:00 GMT</pubDate>
</item><item>
  <title>Critical Questions to Ask Your Team About Microservices</title>
  <description>&lt;p&gt;Over the last 6 weeks we have discussed the creation, maintenance and operations of microservices and event-driven systems. We explored different conversations that development teams should have prior to working with these types of architectures. Asking the questions we outlined, and answering as many of them as are appropriate, will help teams determine which architectural patterns are best for them, and assist in building their systems and processes in a reliable and supportable way. These conversations are known as &amp;quot;&lt;strong&gt;The Critical C&apos;s of Microservices&lt;/strong&gt;&amp;quot;, and each is detailed individually in its own article.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Critical C&apos;s&amp;quot; are: &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-1of6-context.html&quot;&gt;Context&lt;/a&gt;, &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-2of6-consistency.html&quot;&gt;Consistency&lt;/a&gt;, &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-3of6-contract.html&quot;&gt;Contract&lt;/a&gt;, &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-4of6-chaos.html&quot;&gt;Chaos&lt;/a&gt;, &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-5of6-competencies.html&quot;&gt;Competencies&lt;/a&gt; and &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-6of6-coalescence.html&quot;&gt;Coalescence&lt;/a&gt;. For easy reference, I have aggregated all of the key elements of each conversation in this article. For details about &lt;strong&gt;why&lt;/strong&gt; each is important, please consult the article specific to that topic.&lt;/p&gt;
&lt;p&gt;There is also a  &lt;a href=&quot;https://www.cognitiveinheritance.com//CriticalCs/index.html&quot;&gt;Critical C&apos;s of Microservices&lt;/a&gt; website that includes the same information as in these articles. This site will be kept up-to-date as the guidance evolves.&lt;/p&gt;
&lt;h4&gt;Questions about Context&lt;/h4&gt;
&lt;p&gt;Development teams should have conversations around &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-1of6-context.html&quot;&gt;Context&lt;/a&gt; that are primarily focused around the tools and techniques that they intend to use to avoid the Dual-Writes Anti-Pattern. These conversations should include answering questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What database technologies will we use and how can we leverage these tools to create downstream events based on changes to the database state?&lt;/li&gt;
&lt;li&gt;Which of our services are currently idempotent and which ones could reasonably made so? How can we leverage our idempotent services to improve system reliability?&lt;/li&gt;
&lt;li&gt;Do we have any services right now that contain business processes implemented in a less-reliable way? If so, pulling this functionality out into their own microservices might be a good starting point for decomposition.&lt;/li&gt;
&lt;li&gt;What processes will we as a development team implement to track and manage the technical debt of having business processes implemented in a less-reliable way?&lt;/li&gt;
&lt;li&gt;What processes will we implement to be sure that any future less-reliable implementations of business functionality are made with consideration and understanding of the debt being created and a plan to pay it off.&lt;/li&gt;
&lt;li&gt;What processes will we implement to be sure that any existing or future less-reliable implementations of business functionality are documented, understood by, and prioritized by the business process owners.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Questions about Consistency&lt;/h4&gt;
&lt;p&gt;Development teams should have conversations around &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-2of6-consistency.html&quot;&gt;Consistency&lt;/a&gt; that are primarily focused around making certain that the system is assumed to be eventually consistency throughout. These conversations should include answering questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What patterns and tools will we use to create systems that support reliable, eventually consistent operations?&lt;/li&gt;
&lt;li&gt;How will we identify existing areas where higher-levels of consistency have been wedged-in and should be removed?&lt;/li&gt;
&lt;li&gt;How will we prevent future demands for higher-levels of consistency, either explicit or assumed, to creep in to our systems?&lt;/li&gt;
&lt;li&gt;How will we identify when there are unusual or unacceptable delays in the system reaching a consistent state?&lt;/li&gt;
&lt;li&gt;How will we communicate the status of the system and any delays in reaching a consistent state to the relevant stakeholders?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Questions about Contract&lt;/h4&gt;
&lt;p&gt;Development teams should have conversations around &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-3of6-contract.html&quot;&gt;Contract&lt;/a&gt; that are primarily focused around creating processes that define any integration contracts for both upstream and downstream services, and serve to defend their internal data representations against any external consumers. These conversations should include answering questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How will we isolate our internal data representations from those of our downstream consumers?&lt;/li&gt;
&lt;li&gt;What types of compatibility guarantees are our tools and practices capable of providing?&lt;/li&gt;
&lt;li&gt;What procedures should we have in place to monitor incoming and outgoing contracts for compatibility?&lt;/li&gt;
&lt;li&gt;What should our procedures look like for making a change to a stream that has downstream consumers?&lt;/li&gt;
&lt;li&gt;How can we leverage upstream messaging contracts to further reduce the coupling of our systems to our upstream dependencies?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Questions about Chaos&lt;/h4&gt;
&lt;p&gt;Development teams should have conversations around &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-4of6-chaos.html&quot;&gt;Chaos&lt;/a&gt; that are primarily focused around procedures for identifying and remediating possible failure points in the application. These conversations should include answering questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How will we evaluate potential sources of failures in our systems before they are built?
&lt;ul&gt;
&lt;li&gt;How will we handle the inability to reach a dependency such as a database?&lt;/li&gt;
&lt;li&gt;How will we handle duplicate messages sent from our upstream data sources?&lt;/li&gt;
&lt;li&gt;How will we handle messages sent out-of-order from our upstream data sources?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How will we expose possible sources of failures during any pre-deployment testing?&lt;/li&gt;
&lt;li&gt;How will we expose possible sources of failures in the production environment before they occur for users?&lt;/li&gt;
&lt;li&gt;How will we identify errors that occur for users within production?&lt;/li&gt;
&lt;li&gt;How will we prioritize changes to the system based on the results of these experiments?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Questions about Competencies&lt;/h4&gt;
&lt;p&gt;Development teams should have conversations around &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-5of6-competencies.html&quot;&gt;Competencies&lt;/a&gt; that are primarily focused around what systems, sub-systems, and components should be built, which should be installed off-the-shelf, and what libraries or infrastructure capabilities should be utilized. These conversations should include answering questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are our core competencies?&lt;/li&gt;
&lt;li&gt;How do we identify &amp;quot;build vs. buy&amp;quot; opportunities?&lt;/li&gt;
&lt;li&gt;How do we make &amp;quot;build vs. buy&amp;quot; decisions on needed systems?&lt;/li&gt;
&lt;li&gt;How do we identify cross-cutting concerns and infrastructure capabilites that can be leveraged?&lt;/li&gt;
&lt;li&gt;How do we determine which libraries or infrastructure components will be utilized?&lt;/li&gt;
&lt;li&gt;How do we manage the versioning of utilized components, especially in regard to security updates?&lt;/li&gt;
&lt;li&gt;How do we document our decisions for later review?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Questions about Coalescence&lt;/h4&gt;
&lt;p&gt;Development teams should have conversations around &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-6of6-coalescence.html&quot;&gt;Coalescence&lt;/a&gt; that are primarily focused around brining critical information about the operation of our systems together for easy access. These conversations should include answering questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is our mechanism for deployment and system verification?
&lt;ul&gt;
&lt;li&gt;How will we identify, as quickly as possible, when a deployment has had a negative impact on our system?&lt;/li&gt;
&lt;li&gt;Are there tests that can validate the operation of the system end-to-end?&lt;/li&gt;
&lt;li&gt;How will we surface the status of any deployment and system verification tests?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is our mechanism for logging/traceability within our system?
&lt;ul&gt;
&lt;li&gt;How will we coalesce our logs from the various services within the system?&lt;/li&gt;
&lt;li&gt;How will we know if there are anomalies in our logs?&lt;/li&gt;
&lt;li&gt;Are there additional identifiers we need to add to allow traceability?&lt;/li&gt;
&lt;li&gt;Are there log queries that, if enabled, might provide additional support during an outage?&lt;/li&gt;
&lt;li&gt;Are there ways to increase the level of logging when needed to provide additional information and can this be done wholistically on the system?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How will we expose SLIs and other metrics so they are available when needed?&lt;/li&gt;
&lt;li&gt;How will we know when there are anomalies in our metrics?&lt;/li&gt;
&lt;li&gt;What are the metrics that would be needed in an outage and how will we surface those for easy access?&lt;/li&gt;
&lt;li&gt;Are there additional metrics that, if enabled, might provide additional support during an outage?&lt;/li&gt;
&lt;li&gt;Are there ways to perform ad-hoc queries against SLIs and metrics to provide additional insight in an outage?&lt;/li&gt;
&lt;li&gt;How will we identify the status of dependencies so we can understand when our systems are reacting to downstream anomalies?
&lt;ul&gt;
&lt;li&gt;How will we surface dependency status for easy access during an outage?&lt;/li&gt;
&lt;li&gt;Are there metrics we can surface for our dependencies that might help during an outage?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
  <link>https://www.cognitiveinheritance.com/Posts/critical-questions-about-microservice.html</link>
  <author>aa88801d-9543-467e-9d7e-8768d2d14aa7@bsstahl.com (Barry S. Stahl)</author>
  <guid>https://www.cognitiveinheritance.com/Permalinks/082c3f8a-ac4a-4231-9962-01536167e4a5.html</guid>
  <pubDate>Mon, 23 Jan 2023 07:00:00 GMT</pubDate>
</item><item>
  <title>The Critical C's of Microservices - Coalescence</title>
  <description>&lt;p&gt;&amp;quot;&lt;strong&gt;The Critical C&apos;s of Microservices&lt;/strong&gt;&amp;quot; are a series of conversations that development teams should have around building event-driven or other microservice based architectures. These topics will help teams determine which architectural patterns are best for them, and assist in building their systems and processes in a reliable and supportable way.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Critical C&apos;s&amp;quot; are: &lt;strong&gt;Context&lt;/strong&gt;, &lt;strong&gt;Consistency&lt;/strong&gt;, &lt;strong&gt;Contract&lt;/strong&gt;, &lt;strong&gt;Chaos&lt;/strong&gt;, &lt;strong&gt;Competencies&lt;/strong&gt; and &lt;strong&gt;Coalescence&lt;/strong&gt;. Each of these topics has been covered in detail in this series of 6 articles. The first article of the 6 was on the subject of &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-1of6-context.html&quot;&gt;Context&lt;/a&gt;. This is the final article in the series, and covers the topic of &lt;strong&gt;Coalescence&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Coalescence&lt;/h4&gt;
&lt;p&gt;The use of Microservices reduces the complexity of our services in many ways, however it also adds complexity when it comes to deployment and operations. More services mean more deployments, even as each of those deployments is smaller and more isolated. Additionally, they can be harder on operations and support teams since there can be many more places to go when you need to find information. Ideally, we would coalesce all of the necessary information to operate and troubleshoot our systems in a single pane-of-glass so that our operations and support engineers don&apos;t have to search for information in a crisis.&lt;/p&gt;
&lt;p&gt;Deployment and system verification testing can help us identify when there are problems at any point in our system and give us insight into what the problems might be and what caused them. Tests run immediately after any deployment can help identify when a particular deployment has caused a problem so it can be addressed quickly. Likewise, ongoing system verification tests can give early indications of problems irrespective of the cause. Getting information about the results of these tests quickly and easily into the hands of the engineers that can act on them can reduce costs and prevent outages.&lt;/p&gt;
&lt;p&gt;Logging and traceability is generally considered a solved problem, so long as it is used effectively. We need to setup our systems to make the best use of our distributed logging systems. This often means adding a correlation identifier alongside various request and causation ids to make it easy to trace requests through the system. We also need to be able to monitor and surface our logs so that unusual activity can be recognized and acted on as quickly as possible.&lt;/p&gt;
&lt;p&gt;Service Level Indicators (SLIs) and other metrics can provide key insights into the operations of our systems, even if no unusual activity is seen within our logs. Knowing what operational metrics suggest there might be problems within our systems, and monitoring changes to those metrics for both our services and our dependencies can help identify, troubleshoot and even prevent outages. Surfacing those metrics for easy access can give our support and operations engineers the tools they need to do their jobs effectively.&lt;/p&gt;
&lt;h4&gt;Goals of the Conversation&lt;/h4&gt;
&lt;p&gt;Development teams should have conversations around &lt;strong&gt;Coalescence&lt;/strong&gt; that are primarily focused around brining critical information about the operation of our systems together for easy access. These conversations should include answering questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is our mechanism for deployment and system verification?
&lt;ul&gt;
&lt;li&gt;How will we identify, as quickly as possible, when a deployment has had a negative impact on our system?&lt;/li&gt;
&lt;li&gt;Are there tests that can validate the operation of the system end-to-end?&lt;/li&gt;
&lt;li&gt;How will we surface the status of any deployment and system verification tests?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is our mechanism for logging/traceability within our system?
&lt;ul&gt;
&lt;li&gt;How will we coalesce our logs from the various services within the system?&lt;/li&gt;
&lt;li&gt;How will we know if there are anomalies in our logs?&lt;/li&gt;
&lt;li&gt;Are there additional identifiers we need to add to allow traceability?&lt;/li&gt;
&lt;li&gt;Are there log queries that, if enabled, might provide additional support during an outage?&lt;/li&gt;
&lt;li&gt;Are there ways to increase the level of logging when needed to provide additional information and can this be done wholistically on the system?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How will we expose SLIs and other metrics so they are available when needed?&lt;/li&gt;
&lt;li&gt;How will we know when there are anomalies in our metrics?&lt;/li&gt;
&lt;li&gt;What are the metrics that would be needed in an outage and how will we surface those for easy access?&lt;/li&gt;
&lt;li&gt;Are there additional metrics that, if enabled, might provide additional support during an outage?&lt;/li&gt;
&lt;li&gt;Are there ways to perform ad-hoc queries against SLIs and metrics to provide additional insight in an outage?&lt;/li&gt;
&lt;li&gt;How will we identify the status of dependencies so we can understand when our systems are reacting to downstream anomalies?
&lt;ul&gt;
&lt;li&gt;How will we surface dependency status for easy access during an outage?&lt;/li&gt;
&lt;li&gt;Are there metrics we can surface for our dependencies that might help during an outage?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
  <link>https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-6of6-coalescence.html</link>
  <author>aa88801d-9543-467e-9d7e-8768d2d14aa7@bsstahl.com (Barry S. Stahl)</author>
  <guid>https://www.cognitiveinheritance.com/Permalinks/a0280db3-6d32-4c89-81c4-10ce2cd3522d.html</guid>
  <pubDate>Mon, 16 Jan 2023 07:00:00 GMT</pubDate>
</item><item>
  <title>The Critical C's of Microservices - Competencies</title>
  <description>&lt;p&gt;&amp;quot;&lt;strong&gt;The Critical C&apos;s of Microservices&lt;/strong&gt;&amp;quot; are a series of conversations that development teams should have around building event-driven or other microservice based architectures. These topics will help teams determine which architectural patterns are best for them, and assist in building their systems and processes in a reliable and supportable way.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Critical C&apos;s&amp;quot; are: &lt;strong&gt;Context&lt;/strong&gt;, &lt;strong&gt;Consistency&lt;/strong&gt;, &lt;strong&gt;Contract&lt;/strong&gt;, &lt;strong&gt;Chaos&lt;/strong&gt;, &lt;strong&gt;Competencies&lt;/strong&gt; and &lt;strong&gt;Coalescence&lt;/strong&gt;. Each of these topics will be covered in detail in this series of articles. The first article of the 6 was on the subject of &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-1of6-context.html&quot;&gt;Context&lt;/a&gt;. This is article 5 of the series, and covers the topic of &lt;strong&gt;Competencies&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Competencies&lt;/h4&gt;
&lt;p&gt;It is our responsibility as engineers to spend our limited resources on those things that give the companies we are building for a competitive advantage in the market. This means limiting our software builds to areas where we can differentiate that company from others. Not every situation requires us to build a custom solution, and even when we do, there is usually no need for us to build every component of that system.&lt;/p&gt;
&lt;p&gt;If the problem we are solving is a common one that many companies deal with, and our solution does not give us a competitive advantage over those other companies, we are probably better off using an off-the-shelf product, whether that is a commercial (COTS) product, or a Free or Open-Source one (FOSS). Software we build should be unique to the company it is being built for, and provide that company with a competitive advantage. There is no need for us to build another Customer Relationship Manager (CRM) or Accounting system since these systems implement solutions to solved problemns that are generally solved in the same way by everyone. We should only build custom solutions if we are doing something that has never been done before or we need to do things in a way that is different from everyone else and can&apos;t be done using off-the-shelf systems.&lt;/p&gt;
&lt;p&gt;We should also only be building custom software when the problem being solved is part of our company&apos;s &lt;a href=&quot;https://en.wikipedia.org/wiki/Core_competency&quot; title=&quot;A combination of multiple resources and skills that distinguish a firm in the marketplace and therefore are the foundation of companies&apos; competitiveness&quot;&gt;core competencies&lt;/a&gt;. If we are doing this work for a company that builds widgets, it is unlikely, though not impossible, that building a custom solution for getting parts needed to build the widgets will provide that company with a competitive advantage. We are probably better off if we focus our efforts on software to help make the widgets in ways that are better, faster or cheaper.&lt;/p&gt;
&lt;p&gt;If our &amp;quot;build vs. buy&amp;quot; decision is to build a custom solution, there are likely to be opportunities within those systems to use pre-existing capabilities rather than writing everything from scratch. For example, many cross-cutting concerns within our applications have libraries that support them very effectively. We should not be coding our own implementations for things like &lt;a href=&quot;https://en.wikipedia.org/wiki/Logging_(computing)&quot; title=&quot;The act of keeping a log of events that occur in a computer system, such as problems, errors or just information on current operation&quot;&gt;logging&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_configuration&quot; title=&quot;The arrangement of a system&apos;s functional units according to their nature, number and chief characteristics&quot;&gt;configuration&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Security&quot; title=&quot;Protection from or resilience against, potential harm (or other unwanted coercive change) caused by others, by restraining the freedom of others to act&quot;&gt;security&lt;/a&gt;. Likewise, there are many capabilities that already exist in our infrastructure that we should take advantage of. &lt;a href=&quot;https://en.wikipedia.org/wiki/Encryption&quot; title=&quot;The process of encoding information&quot;&gt;Encryption&lt;/a&gt;, which is often a capability of the operating system, is one that springs to mind. We should certainly never &amp;quot;roll-our-own&amp;quot; for more complex infrastructure features like &lt;a href=&quot;https://en.wikipedia.org/wiki/Replication_(computing)&quot; title=&quot;Sharing information so as to ensure consistency between redundant resources, such as software or hardware components, to improve reliability, fault-tolerance, or accessibility.&quot;&gt;Replication&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Change_data_capture&quot; title=&quot;CDC is a set of software design patterns used to determine and track the data that has changed so that action can be taken using the changed data.&quot;&gt;Change Data Capture&lt;/a&gt;, but might even want to consider avoiding rebuilding infrastructure capabilities that we more commonly build. An example of this might be if we would typically build a &lt;a href=&quot;https://en.wikipedia.org/wiki/Web_API&quot; title=&quot;An Application Programming Interface exposed over HTTP(S)&quot;&gt;Web API&lt;/a&gt; for our systems, we might consider exposing the API&apos;s of our backing infrastructure components instead, properly isolated and secured of course, perhaps via an &lt;a href=&quot;https://en.wikipedia.org/wiki/API_management&quot; title=&quot;The process of creating and publishing web application programming interfaces (APIs), enforcing their usage policies, controlling access, nurturing the subscriber community, collecting and analyzing usage statistics, and reporting on performance&quot;&gt;API Management&lt;/a&gt; component.&lt;/p&gt;
&lt;h4&gt;Goals of the Conversation&lt;/h4&gt;
&lt;p&gt;Development teams should have conversations around &lt;strong&gt;Competencies&lt;/strong&gt; that are primarily focused around what systems, sub-systems, and components should be built, which should be installed off-the-shelf, and what libraries or infrastructure capabilities should be utilized. These conversations should include answering questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are our core competencies?&lt;/li&gt;
&lt;li&gt;How do we identify &amp;quot;build vs. buy&amp;quot; opportunities?&lt;/li&gt;
&lt;li&gt;How do we make &amp;quot;build vs. buy&amp;quot; decisions on needed systems?&lt;/li&gt;
&lt;li&gt;How do we identify cross-cutting concerns and infrastructure capabilites that can be leveraged?&lt;/li&gt;
&lt;li&gt;How do we determine which libraries or infrastructure components will be utilized?&lt;/li&gt;
&lt;li&gt;How do we manage the versioning of utilized components, especially in regard to security updates?&lt;/li&gt;
&lt;li&gt;How do we document our decisions for later review?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Next Up - Coalescence&lt;/h4&gt;
&lt;p&gt;In the final article of this series we will look at &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-6of6-coalescence.html&quot;&gt;Coalescence&lt;/a&gt; and how we should work to bring all of the data together for our operations &amp;amp; support engineers.&lt;/p&gt;
</description>
  <link>https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-5of6-competencies.html</link>
  <author>aa88801d-9543-467e-9d7e-8768d2d14aa7@bsstahl.com (Barry S. Stahl)</author>
  <guid>https://www.cognitiveinheritance.com/Permalinks/a99861ed-9829-4110-9e2f-1e75efcb43a2.html</guid>
  <pubDate>Mon, 09 Jan 2023 07:00:00 GMT</pubDate>
</item><item>
  <title>The Critical C's of Microservices - Chaos</title>
  <description>&lt;p&gt;&amp;quot;&lt;strong&gt;The Critical C&apos;s of Microservices&lt;/strong&gt;&amp;quot; are a series of conversations that development teams should have around building event-driven or other microservice based architectures. These topics will help teams determine which architectural patterns are best for them, and assist in building their systems and processes in a reliable and supportable way.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Critical C&apos;s&amp;quot; are: &lt;strong&gt;Context&lt;/strong&gt;, &lt;strong&gt;Consistency&lt;/strong&gt;, &lt;strong&gt;Contract&lt;/strong&gt;, &lt;strong&gt;Chaos&lt;/strong&gt;, &lt;strong&gt;Competencies&lt;/strong&gt; and &lt;strong&gt;Coalescence&lt;/strong&gt;. Each of these topics will be covered in detail in this series of articles. The first article of the 6 was on the subject of &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-1of6-context.html&quot;&gt;Context&lt;/a&gt;. This is article 4 of the series, and covers the topic of &lt;strong&gt;Chaos&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Chaos&lt;/h4&gt;
&lt;p&gt;One of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing&quot;&gt;Fallacies of Distributed Computing&lt;/a&gt; is that the network is reliable. We should have similarly low expectations for the reliability of all of the infrastructure on which our services depend. Networks will segment, commodity servers and drives will fail, containers and operating systems will become unstable. In other words, our software will have errors during operation, no matter how resilient we attempt to make it. We need to embrace the fact that failures will occur in our software, and will do so at random times and often in unpredictable ways.&lt;/p&gt;
&lt;p&gt;If we are to build systems that don&apos;t require our constant attention, especially during off-hours, we need to be able to identify what happens when failures occur, and design our systems in ways that will allow them to heal automatically once the problem is corrected.&lt;/p&gt;
&lt;p&gt;To start this process, I recommend playing &amp;quot;what-if&amp;quot; games using diagrams of the system. Walk through the components of the system, and how the data flows through it, identifying each place where a failure could occur. Then, in each area where failures could happen, attempt to define the possible failure modes and explore what the impact of those failures might be. This kind of &amp;quot;virtual&amp;quot; Chaos Engineering is certainly no substitute for actual experimentation and testing, but is a good starting point for more in-depth analysis. It also can be very valuable in helping to understand the system and to produce more hardened services in the future.&lt;/p&gt;
&lt;p&gt;Thought experiments are useful, but you cannot really know how a system will respond to different types of failures until you have those failures in production. Historically, such &amp;quot;tests&amp;quot; have occurred at random, at the whim of the infrastructure, and usually at the worst possible time. Instead of leaving these things to chance, tools like &lt;em&gt;Chaos Monkey&lt;/em&gt; can be used to simulate failures in production, and can be configured to create these failures during times where the appropriate support engineers are available and ready to respond if necessary. This way, we can see if our systems respond as we expect, and more importantly, heal themselves as we expect.&lt;/p&gt;
&lt;p&gt;Even if you&apos;re not ready to jump into using automated experimentation tools in production just yet, a lot can be learned from using feature-flags and changing service behaviors in a more controlled manner as a starting point. This might involve a flag that can be set to cause an API method to return an error response, either as a hard failure, or during random requests for a period of time. Perhaps a switch could be set to stop a service from picking-up asynchronous messages from a queue or topic. Of course, these flags can only be placed in code we control, so we can&apos;t test failures of dependencies like databases and other infrastructure components in this way. For that, we&apos;ll need more involved testing methods.&lt;/p&gt;
&lt;p&gt;Regardless of how we test our systems, it is important that we do everything we can to build systems that will heal themselves without the need for us to intervene every time a failure occurs. As a result, I highly recommend using asynchronous messaging patterns whenever possible. The asynchrony of these tools allow our services to be &amp;quot;temporally decoupled&amp;quot; from their dependencies. As a result, if a container fails and is restarted by Kubernetes, any message in process is rolled-back onto the queue or topic, and the system can pick right up where it left off.&lt;/p&gt;
&lt;h4&gt;Goals of the Conversation&lt;/h4&gt;
&lt;p&gt;Development teams should have conversations around &lt;strong&gt;Chaos&lt;/strong&gt; that are primarily focused around procedures for identifying and remediating possible failure points in the application. These conversations should include answering questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How will we evaluate potential sources of failures in our systems before they are built?
&lt;ul&gt;
&lt;li&gt;How will we handle the inability to reach a dependency such as a database?&lt;/li&gt;
&lt;li&gt;How will we handle duplicate messages sent from our upstream data sources?&lt;/li&gt;
&lt;li&gt;How will we handle messages sent out-of-order from our upstream data sources?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How will we expose possible sources of failures during any pre-deployment testing?&lt;/li&gt;
&lt;li&gt;How will we expose possible sources of failures in the production environment before they occur for users?&lt;/li&gt;
&lt;li&gt;How will we identify errors that occur for users within production?&lt;/li&gt;
&lt;li&gt;How will we prioritize changes to the system based on the results of these experiments?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Next Up - Competencies&lt;/h4&gt;
&lt;p&gt;In the next article of this series we will look at &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-5of6-competencies.html&quot;&gt;Competencies&lt;/a&gt; and how we should focus at least as much on what we build as how we build it.&lt;/p&gt;
</description>
  <link>https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-4of6-chaos.html</link>
  <author>aa88801d-9543-467e-9d7e-8768d2d14aa7@bsstahl.com (Barry S. Stahl)</author>
  <guid>https://www.cognitiveinheritance.com/Permalinks/0d794105-ef08-4465-b806-4a8eff7523c7.html</guid>
  <pubDate>Mon, 02 Jan 2023 07:00:00 GMT</pubDate>
</item><item>
  <title>The Critical C's of Microservices - Contract</title>
  <description>&lt;p&gt;&amp;quot;&lt;strong&gt;The Critical C&apos;s of Microservices&lt;/strong&gt;&amp;quot; are a series of conversations that development teams should have around building event-driven or other microservice based architectures. These topics will help teams determine which architectural patterns are best for them, and assist in building their systems and processes in a reliable and supportable way.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Critical C&apos;s&amp;quot; are: &lt;strong&gt;Context&lt;/strong&gt;, &lt;strong&gt;Consistency&lt;/strong&gt;, &lt;strong&gt;Contract&lt;/strong&gt;, &lt;strong&gt;Chaos&lt;/strong&gt;, &lt;strong&gt;Competencies&lt;/strong&gt; and &lt;strong&gt;Coalescence&lt;/strong&gt;. Each of these topics will be covered in detail in this series of articles. The first article of the 6 was on the subject of &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-1of6-context.html&quot;&gt;Context&lt;/a&gt;. This is article 3 of the series, and covers the topic of &lt;strong&gt;Contract&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Contract&lt;/h4&gt;
&lt;p&gt;Once a message has been defined and agreed to as an integration mechanism, all stakeholders in that integration have legitimate expectations of that message contract. Primarily, these expectations includes the agreed-to level of compatibility of future messages, and what the process will be when the contract needs to change. These guarantees will often be such that messages can add fields as needed, but cannot remove, move, or change the nature of existing fields without significant coordination with the stakeholders. This can have a severe impact on the &lt;strong&gt;agility&lt;/strong&gt; of our dev teams as they try to move fast and iterate with their designs.&lt;/p&gt;
&lt;p&gt;In order to keep implementations flexible, there should be an isolation layer between the internal representation (Domain Model) of any message, and the more public representation (Integration Model). This way, the developers can change the internal representation with only limited restrictions, so long as as the message remains transformationally compatible with the integration message, and the transformation is modified as needed so that no change is seen by the integration consumers. The two representations may take different forms, such as one in a database, the other in a Kafka topic. The important thing is that the developers can iterate quickly on the internal representation when they need to.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.cognitiveinheritance.com/Images/CTP%20Pattern%20-%20Eventually%20Consistent.png&quot; alt=&quot;Drawing showing 2 different representations of a WorkOrder in the same Workflow - 1 stored in the DB the other in Kafka&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Eventually Consistent&lt;/strong&gt; example from the earlier &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-2of6-consistency.html&quot;&gt;Consistency&lt;/a&gt; topic (included above) shows such an isolation layer since the &lt;em&gt;WorkOrders DB&lt;/em&gt; holds the internal representation of the message, the &lt;em&gt;Kafka Connect&lt;/em&gt; connector is the abstraction that performs the transformation as needed, and the topic that the connector produces data to is the integration path. In this model, the development team can iterate on the model inside the DB without necessarily needing to make changes to the more public Kafka topic.&lt;/p&gt;
&lt;p&gt;We need to take great care to defend these internal streams and keep them isolated. Ideally, only 1 service should ever write to our domain model, and only internal services, owned by the same small development team, should read from it. As soon as we allow other teams into our domain model, it becomes an integration model whether we want it to be or not. Even other internal services should use the public representation if it is reasonable to do so.&lt;/p&gt;
&lt;p&gt;Similarly, our services should make proper use of upstream integration models. We need to understand what level of compatibility we can expect and how we will be notified of changes. We should use these data paths as much as possible to bring external data locally to our services, in exactly the form that our service needs it in, so that each of our services can own its own data for both reliability and efficiency. Of course, these local stores must be read-only. We need to publish change requests back to the &lt;em&gt;System of Record&lt;/em&gt; to make any changes to data sourced by those systems.&lt;/p&gt;
&lt;p&gt;We should also do everything we can to avoid making assumptions about data we don&apos;t own. Assuming a data type, particular provenance, or embedded-intelligence of a particular upstream data field will often cause problems in the future because we have created unnecessary coupling. As an example, it is good practice to treat all foreign identifiers as strings, even if they look like integers, and to never make assumptions along the lines of &amp;quot;...those identifiers will always be increasing in value&amp;quot;. While these may be safe assumptions for a while, they should be avoided if they reasonably can be to prevent future problems.&lt;/p&gt;
&lt;h4&gt;Goals of the Conversation&lt;/h4&gt;
&lt;p&gt;Development teams should have conversations around &lt;strong&gt;Contract&lt;/strong&gt; that are primarily focused around creating processes that define any integration contracts for both upstream and downstream services, and serve to defend their internal data representations against any external consumers. These conversations should include answering questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How will we isolate our internal data representations from those of our downstream consumers?&lt;/li&gt;
&lt;li&gt;What types of compatibility guarantees are our tools and practices capable of providing?&lt;/li&gt;
&lt;li&gt;What procedures should we have in place to monitor incoming and outgoing contracts for compatibility?&lt;/li&gt;
&lt;li&gt;What should our procedures look like for making a change to a stream that has downstream consumers?&lt;/li&gt;
&lt;li&gt;How can we leverage upstream messaging contracts to further reduce the coupling of our systems to our upstream dependencies?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Next Up - Chaos&lt;/h4&gt;
&lt;p&gt;In the next article of this series we will look at &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-4of6-chaos.html&quot;&gt;Chaos&lt;/a&gt; and how we can use both thought and physical experiments to help improve our system&apos;s reliability.&lt;/p&gt;
</description>
  <link>https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-3of6-contract.html</link>
  <author>aa88801d-9543-467e-9d7e-8768d2d14aa7@bsstahl.com (Barry S. Stahl)</author>
  <guid>https://www.cognitiveinheritance.com/Permalinks/d4b58b20-d4d7-4234-a828-4563d68db564.html</guid>
  <pubDate>Mon, 26 Dec 2022 07:00:00 GMT</pubDate>
</item><item>
  <title>The Critical C's of Microservices - Consistency</title>
  <description>&lt;p&gt;&amp;quot;&lt;strong&gt;The Critical C&apos;s of Microservices&lt;/strong&gt;&amp;quot; are a series of conversations that development teams should have around building event-driven or other microservice based architectures. These topics will help teams determine which architectural patterns are best for them, and assist in building their systems and processes in a reliable and supportable way.&lt;/p&gt;
&lt;p&gt;The &amp;quot;Critical C&apos;s&amp;quot; are: &lt;strong&gt;Context&lt;/strong&gt;, &lt;strong&gt;Consistency&lt;/strong&gt;, &lt;strong&gt;Contract&lt;/strong&gt;, &lt;strong&gt;Chaos&lt;/strong&gt;, &lt;strong&gt;Competencies&lt;/strong&gt; and &lt;strong&gt;Coalescence&lt;/strong&gt;. Each of these topics will be covered in detail in this series of articles. Article 1 of the 6 was on the subject of &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-1of6-context.html&quot;&gt;Context&lt;/a&gt;. This is article 2 of the series, and covers the topic of &lt;strong&gt;Consistency&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Consistency&lt;/h4&gt;
&lt;p&gt;The world is eventually consistent. The sooner we get that through our heads and start expecting our systems to act like it, the fewer problems, we will have. In fact, I&apos;ll go out on a limb and say that most of the problems in building and maintaining microservice architectures are the result of failing to fully embrace eventual consistency from the start.&lt;/p&gt;
&lt;p&gt;Data is consistent when it appears the same way when viewed from multiple perspectives. Our systems are said to be consistent when all of the data them is consistent. A system with strong consistency guarantees would be one where every actor, anywhere in the context of the application, would see the exact same value for any data element at any given time. A system that is &lt;em&gt;eventually consistent&lt;/em&gt; is one with strong guarantees that the data will reach all intended targets, but much weaker guarantees about how long it might take to achieve data consistency.&lt;/p&gt;
&lt;p&gt;Full consistency is impossible in a world where there is a finite speed of causation. Strong consistency can only be achieved when every portion of the application waits until the data is fully consistent before processing. This is generally quite difficult unless all of the data is housed in a single, ACID compliant data store, which of course, is a very bad idea when building scalable systems. &lt;strong&gt;Strong&lt;/strong&gt; consistency, or anything more stringent than &lt;strong&gt;eventual&lt;/strong&gt; consistency, may be appropriate under very specific circumstances when data stores are being geo-replicated (assuming the database server is designed for such a thing), but can cause real difficulties, especially in the areas of reliability and scalability, when attempted inside an application.&lt;/p&gt;
&lt;p&gt;We should challenge demands for higher levels of consistency with rigor. Attempts to provide stronger consistency guarantees than &lt;em&gt;eventual&lt;/em&gt; will cause far more problems than they are worth.&lt;/p&gt;
&lt;p&gt;We will always need to look for situations where consistency problems might occur (i.e. race-conditions), expect them to happen, and try to design our systems in such a way as to not need to worry about them. Race conditions and other consistency problems are smells. If you are in a situation where you are might see these types of problems, it may indicate that you need to reevaluate the details of your implementation.&lt;/p&gt;
&lt;p&gt;As an example, let&apos;s take a look at the 3 implementation diagrams below. In all 3 of these implementations, the goal is to have the WorkOrder service modify a WorkOrder and have the changes published onto a topic for downstream consumers. If a WorkOrder already exists, it needs to be loaded from the data store so that appropriate updates can be made. As you will see, the 3 implementations have very different reliability characteristics.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.cognitiveinheritance.com/Images/CTP%20Pattern%20-%20Race%20Condition.png&quot; alt=&quot;3 Possible Implementations - Entity Updated and Published&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Implementation 1 - Dual-Write&lt;/strong&gt;: In the 1st example, the WorkOrder service attempts to both update the entity in the database, and publish the changes to the topic for downstream consumers. This is probably an attempt to keep both the event and the update consistent with one another, and is often mistaken for the simplest solution. However, since it is impossible to make more than 1 reliable change at a time, the only way this implementation can guarantee reliability is if the 1st update is done in an idempotent way. If that is the case, in the circumstances where the 2nd update fails, the service can roll the command message back onto the original topic and try the entire change again. Notice however that this doesn&apos;t guarantee consistency at all. If the DB is updated first, it may be done well before the publication ever occurs, since a retry would end up causing the publication to occur on a later attempt. Attempting to be clever and use a DB transaction to maintain consistency actually makes the problem worse for reasons that are outside of the scope of this discussion. Only a distributed transaction across the database and topic would accomplish that, and would do so at the expense of system scalability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Implementation 2 - Race Condition&lt;/strong&gt;: In the 2nd example, the WorkOrder service reads data from the DB, and uses that to publish any needed updates to the topic. The topic is then used to feed the database, as well as any additional downstream consumers. While it might seem like the race-condition would be obvious here, it is not uncommon to miss this kind of systemic problem in a more complicated environment. It also can be tempting to build the system this way if the original implementation did not involve the DB. If we are adding the data store, we need to make sure data access happens prior to creating downstream events to avoid this kind of race condition. Stay vigilant for these types of scenarios and be willing to make the changes needed to protect the reliability of your system when requirements change.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Implementation 3 - Eventually Consistent&lt;/strong&gt;: In the 3rd example, the DB is used directly by both the WorkOrder service, and as the source of changes to the topic. This scenario is reliable but only &lt;strong&gt;eventually consistent&lt;/strong&gt;. That is, we know that both the DB and the topic will be updated since the WorkOrder service makes the DB update directly, and the reliable change feed from the DB instantiates a new execution context for the topic to be updated. This way, there is only a single change to system state made within each execution context, and we can know that they will happen reliably.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another example of a consistency smell might be when end-users insist that their UI should not return after they update something in an app, until the data is guaranteed to be consistent. I don&apos;t blame users for making these requests. After all, we trained them that the way to be sure that a system is reliable is to hit refresh until they see the data. In this situation, assuming we can&apos;t talk the users out of it, our best path is to make the UI wait until our polling, or a notification mechanism, identifies that the data is now consistent. I think this is a pretty rude thing to do to our users, but if they insist on it, I can only advise them against it. I will not destroy the scalability of systems I design, and add complexity to these systems that the developers will need to maintain forever, by simulating consistency deeper inside the app. The internals of the application should be considered eventually consistent at all times and we need to get used to thinking about our systems in this way.&lt;/p&gt;
&lt;h4&gt;Goals of the Conversation&lt;/h4&gt;
&lt;p&gt;Development teams should have conversations around &lt;strong&gt;Consistency&lt;/strong&gt; that are primarily focused around making certain that the system is assumed to be eventually consistency throughout. These conversations should include answering questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What patterns and tools will we use to create systems that support reliable, eventually consistent operations?&lt;/li&gt;
&lt;li&gt;How will we identify existing areas where higher-levels of consistency have been wedged-in and should be removed?&lt;/li&gt;
&lt;li&gt;How will we prevent future demands for higher-levels of consistency, either explicit or assumed, to creep in to our systems?&lt;/li&gt;
&lt;li&gt;How will we identify when there are unusual or unacceptable delays in the system reaching a consistent state?&lt;/li&gt;
&lt;li&gt;How will we communicate the status of the system and any delays in reaching a consistent state to the relevant stakeholders?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Next Up - Contract&lt;/h4&gt;
&lt;p&gt;In the next article of this series we will look at &lt;a href=&quot;https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-3of6-contract.html&quot;&gt;Contract&lt;/a&gt; and how we can leverage contracts to make our systems more reliable while still maintaining our agility.&lt;/p&gt;
</description>
  <link>https://www.cognitiveinheritance.com/Posts/critical-cs-of-microservices-2of6-consistency.html</link>
  <author>aa88801d-9543-467e-9d7e-8768d2d14aa7@bsstahl.com (Barry S. Stahl)</author>
  <guid>https://www.cognitiveinheritance.com/Permalinks/86685931-2951-4253-a923-563537481cee.html</guid>
  <pubDate>Mon, 19 Dec 2022 07:00:00 GMT</pubDate>
</item>
</channel>
</rss>